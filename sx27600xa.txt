import machine
import time
import ujson

# กำหนดพินสำหรับ RS485
RS485_TX_PIN = 16
RS485_RX_PIN = 17

# การตั้งค่า Modbus RTU (ตามเอกสาร)
MODBUS_BAUDRATE = 9600
MODBUS_DATA_BITS = 8
MODBUS_STOP_BITS = 1
MODBUS_PARITY = None # None Parity check[span_0](end_span)
MODBUS_SLAVE_ADDRESS = 1 # Station number: 1-247, สมมติเป็น 1[span_1](end_span)

# ฟังก์ชันสำหรับ CRC16 (ตามมาตรฐาน Modbus RTU)
def calculate_crc16(data):
    crc = 0xFFFF
    for byte in data:
        crc ^= byte
        for _ in range(8):
            if crc & 0x0001:
                crc >>= 1
                crc ^= 0xA001
            else:
                crc >>= 1
    return crc.to_bytes(2, 'little')

class ModbusRTUClient:
    def __init__(self, uart_id=1, tx_pin=RS485_TX_PIN, rx_pin=RS485_RX_PIN):
        # [span_2]Initializing UART with specified parameters[span_2](end_span)
        self.uart = machine.UART(uart_id, baudrate=MODBUS_BAUDRATE, tx=tx_pin, rx=rx_pin, bits=MODBUS_DATA_BITS, stop=MODBUS_STOP_BITS, parity=MODBUS_PARITY)
        self.slave_address = MODBUS_SLAVE_ADDRESS
        time.sleep_ms(100) # รอให้ UART พร้อม

    def _send_modbus_request(self, slave_address, function_code, start_address, quantity_or_value_or_num_registers, data_bytes=None):
        # สร้าง PDU (Protocol Data Unit)
        pdu = bytearray([function_code])
        pdu.extend(start_address.to_bytes(2, 'big'))

        if function_code == 0x03: # Read Holding Registers[span_3](end_span)
            # quantity_or_value_or_num_registers คือ quantity of registers
            pdu.extend(quantity_or_value_or_num_registers.to_bytes(2, 'big'))
        elif function_code == 0x10: # Write Multiple Registers[span_4](end_span)
            # quantity_or_value_or_num_registers คือ number of registers
            num_registers = quantity_or_value_or_num_registers
            byte_count = len(data_bytes) # data_bytes ที่ถูกส่งมาในฟังก์ชัน write_multiple_registers
            pdu.extend(num_registers.to_bytes(2, 'big'))
            pdu.extend(byte_count.to_bytes(1, 'big'))
            pdu.extend(data_bytes)
        else:
            raise ValueError("Unsupported function code for _send_modbus_request")

        # สร้าง ADU (Application Data Unit)
        adu = bytearray([slave_address])
        adu.extend(pdu)
        adu.extend(calculate_crc16(adu)) # Verification mode CRC16[span_5](end_span)

        self.uart.write(adu)
        time.sleep_ms(50) # รอการตอบกลับ

    def _read_modbus_response(self):
        response = bytearray()
        start_time = time.ticks_ms()
        # Timeout 500ms, typical for Modbus RTU, adjust if needed
        while (time.ticks_ms() - start_time) < 500:
            if self.uart.any():
                response.extend(self.uart.read())
            
            if len(response) >= 5: # Minimum response length (slave_id + func_code + data/exception_code + CRC)
                # Check if it's a valid Modbus RTU response with correct CRC
                received_crc = int.from_bytes(response[-2:], 'little')
                calculated_crc = int.from_bytes(calculate_crc16(response[:-2]), 'little')

                if received_crc == calculated_crc:
                    func_code = response[1]
                    if func_code == 0x03: # Read Holding Registers response[span_6](end_span)
                        # Expected format: Slave ID (1) + Func Code (1) + Byte Count (1) + Data (N) + CRC (2)
                        # Data length is response[2] bytes, total length = 1 + 1 + 1 + response[2] + 2
                        if len(response) >= response[2] + 5:
                            return response
                    elif func_code == 0x10: # Write Multiple Registers response[span_7](end_span)
                        # Expected format: Slave ID (1) + Func Code (1) + Start Address (2) + Quantity (2) + CRC (2) = 8 bytes
                        if len(response) == 8:
                            return response
                    elif (func_code & 0x80): # Modbus Exception Response (e.g., 0x83 for read, 0x90 for write)
                        # Expected format: Slave ID (1) + Func Code with error bit (1) + Exception Code (1) + CRC (2) = 5 bytes
                        if len(response) == 5:
                            print(f"Modbus Exception: Code {response[2]}")
                            return None # Return None for exception responses
                # If CRC doesn't match or not enough data for a valid response, keep reading
        print("No response or timeout, or CRC mismatch.")
        return None

    def read_holding_registers(self, start_address, quantity):
        """ อ่าน Holding Registers (Function Code: 0x03) """
        # [span_8]All data is in the holding area, and the address starts from 1.[span_8](end_span)
        # [span_9]The terminal reads the controller data(function code:0x03)[span_9](end_span)
        self._send_modbus_request(self.slave_address, 0x03, start_address, quantity)
        response = self._read_modbus_response()
        if response and response[1] == 0x03: # ตรวจสอบว่าเป็น response สำหรับ 0x03
            # response format: slave_id (1 byte) + func_code (1 byte) + byte_count (1 byte) + data (N bytes) + CRC (2 bytes)
            # ข้อมูลเริ่มต้นที่ byte ที่ 3 (index 3)
            data_bytes = response[3:-2]
            # แปลง data_bytes เป็น list ของ integers (word)
            registers = []
            for i in range(0, len(data_bytes), 2):
                registers.append(int.from_bytes(data_bytes[i:i+2], 'big')) # Data is typically big-endian in Modbus registers
            return registers
        return None

    def write_multiple_registers(self, start_address, values):
        """ เขียน Multiple Registers (Function Code: 0x10) """
        # [span_10]The terminal writes data/commands to the controller (function code: 0x10)[span_10](end_span)
        num_registers = len(values)
        data_bytes = bytearray()
        for value in values:
            data_bytes.extend(value.to_bytes(2, 'big')) # Values are typically 2 bytes (word) in Modbus registers

        self._send_modbus_request(self.slave_address, 0x10, start_address, num_registers, data_bytes)
        response = self._read_modbus_response()
        if response and response[1] == 0x10: # ตรวจสอบว่าเป็น response สำหรับ 0x10
            # สำหรับ Function Code 0x10, response จะเป็น slave_id + func_code + start_addr + num_regs + CRC
            if len(response) == 8:
                # ตรวจสอบว่า start_address และ num_regs ใน response ตรงกับที่ส่งไป
                response_start_addr = int.from_bytes(response[2:4], 'big')
                response_num_regs = int.from_bytes(response[4:6], 'big')
                if response_start_addr == start_address and response_num_regs == num_registers:
                    print("Write successful.")
                    return True
        print("Write failed or no proper response.")
        return False

# สร้าง Instance ของ Client
modbus_client = ModbusRTUClient()

def get_machine_status():
    """
    1. เช็คสถานะเครื่อง/ประตู/การทำงาน
    [span_11]อ่านข้อมูลจาก Address 20 ถึง 42 ตามที่ระบุในเอกสาร[span_11](end_span)
    """
    # [span_12]Read the basic status and monitoring information of the controller[span_12](end_span)
    # Starting from Address 20, reading 23 registers (from 20 to 42 based on available info)
    # The current code reads 40 registers, which goes beyond the documented addresses in the snippet.
    # Let's read up to 42 based on the provided table, which means 23 registers (42 - 20 + 1).
    status_data = modbus_client.read_holding_registers(20, 23) 
    if status_data and len(status_data) >= 23: # Ensure we have enough data
        run_status = status_data[0] # Address 20: Run status[span_13](end_span)
        door_status = status_data[1] # Address 21: Door status[span_14](end_span)
        error_status_bit_0 = (status_data[2] & 0x01) # Address 22: Error status (hit 0:Error)[span_15](end_span)
        
        # Addresses from 23 up to 38 are not explicitly defined in the provided 'The following table'.
        # Assuming sequential mapping based on the provided code structure and common Modbus practice.
        auto_program_total_remain_time_hour = status_data[3] # Implicitly Address 23
        auto_program_total_remain_time_min = status_data[4] # Implicitly Address 24
        auto_program_total_remain_time_sec = status_data[5] # Implicitly Address 25
        current_inlet_temperature = status_data[6] # Implicitly Address 26
        current_outlet_temperature = status_data[7] # Implicitly Address 27
        currently_running_program_number = status_data[8] # Implicitly Address 28
        currently_running_step_number = status_data[9] # Implicitly Address 29
        coins_required_of_currently_selecting_program = status_data[10] # Implicitly Address 30
        current_coins = status_data[11] # Implicitly Address 31
        total_coins_recorded = status_data[12] # Implicitly Address 32
        coins_recorded_in_cash_box = status_data[13] # Implicitly Address 33
        
        # The remaining addresses 34-38, 39, 41, 42 are also based on the structure of your original code
        # [span_16]and the partial information in the 'The following table'[span_16](end_span).
        # It seems there might be a gap or further definition needed for those specific addresses.
        # For now, I'll map them as they appear in your original code's `status_data` access.
        # These are likely based on a more complete version of the protocol document not fully provided.
        # Assuming `status_data[14]` corresponds to Address 34, and so on.
        machine_menu = status_data[14] # Assuming Address 34
        coin_inserted = status_data[15] # Assuming Address 35
        must_insert_coin = status_data[16] # Assuming Address 36
        coin_insert = status_data[17] # Assuming Address 37

        # The document shows Address 39 and 41, 42 but doesn't explicitly name intermediate addresses.
        # It's important to verify the exact mapping for addresses between 33 and 42 if possible.
        # For this refactoring, I'll keep the access as per your original code to demonstrate the structure.
        # However, a robust implementation would require precise address mapping for each field.
        
        # Translation maps based on provided document information and common sense
        run_status_map = {
            0: "Power on", #[span_17](end_span)
            1: "Standby", #[span_18](end_span)
            2: "N/A", #[span_19](end_span)
            # Additional states beyond document for broader compatibility or future expansion
            # [span_20]3: "Autorun" - this was in your original code's map, but not in provided doc for address 20[span_20](end_span)
            # 4: "Manual"
            # 5: "Idle"
        }
        door_status_map = {
            0: "Door opened", #[span_21](end_span)
            1: "Door closed", #[span_22](end_span)
            # Additional states for door status
            # 2: "N/A",
            # 3: "Locked",
            # 4: "Error",
            # 5: "Locking"
        }
        error_status_map = {
            0: "Normal", # Based on 'hit 0:Error' implying 0 is no error[span_23](end_span)
            1: "Error" # Based on 'hit 0:Error'[span_24](end_span)
        }

        response = {
            "app": "dryer",
            "version": "sx27600xa_2",
            "run_status": run_status_map.get(run_status, f"Unknown ({run_status})"),
            "door_status": door_status_map.get(door_status, f"Unknown ({door_status})"),
            "error_status": error_status_map.get(error_status_bit_0, f"Unknown ({error_status_bit_0})"), # Only using bit 0 for error status
            "auto_time_hour": auto_program_total_remain_time_hour, #[span_25](end_span)
            "auto_time_min": auto_program_total_remain_time_min, #[span_26](end_span)
            "auto_time_sec": auto_program_total_remain_time_sec, #[span_27](end_span)
            "current_inlet_temperature": current_inlet_temperature, #[span_28](end_span)
            "current_outlet_temperature": current_outlet_temperature, #[span_29](end_span)
            "currently_running_program_number": currently_running_program_number, #[span_30](end_span)
            "currently_running_step_number": currently_running_step_number, #[span_31](end_span)
            "coins_required_of_currently_selecting_program": coins_required_of_currently_selecting_program, #[span_32](end_span)
            "current_coins": current_coins, #[span_33](end_span)
            "total_coins_recorded": total_coins_recorded, #[span_34](end_span)
            "coins_recorded_in_cash_box": coins_recorded_in_cash_box, #[span_35](end_span)
            "machine_menu": machine_menu,
            "must_insert_coin": must_insert_coin,
            "coin_inserted": coin_inserted,
            "coin_insert": coin_insert,
            "raw_data": status_data
        }
        return ujson.dumps(response)
    return ujson.dumps({"error": "Failed to read machine status or incomplete data."})

def select_program(program_number):
    """
    2. เลือกโปรแกรมทำงาน
    [span_36]เขียนค่า program_number ไปยัง Address 4 (Selective program)[span_36](end_span)
    หมายเหตุ: เอกสารระบุ Address 4 สำหรับ "Selective program", ไม่ใช่ Address 5
    [span_37]Value range: pay: 1-parameter number of automatic program, frue: 0-19 (0-19 based on document, 1-30 in original code. Sticking to document's implied value range where 'frue: 0.19' likely means 0 to 19 programs.)[span_37](end_span)
    """
    # [span_38]ตรวจสอบขอบเขตค่าตามเอกสาร (frue: 0.19 -> ตีความว่า 0-19)[span_38](end_span)
    if not 0 <= program_number <= 19: 
        return ujson.dumps({"status": "error", "message": "Invalid program number. For free, must be between 0 and 19 based on documentation."})

    # [span_39]Writing to Address 4[span_39](end_span)
    if modbus_client.write_multiple_registers(4, [program_number]): 
        return ujson.dumps({"status": "success", "message": f"Selected program {program_number}."})
    return ujson.dumps({"status": "error", "message": "Failed to select program."})
 
def start_operation():
    """ 
    3. สั่งเริ่มการทำงาน
    [span_40]เขียนค่า 1 ไปยัง Address 1 (Start run)[span_40](end_span)
    """
    if modbus_client.write_multiple_registers(1, [1]): # Address 1, Value 1[span_41](end_span)
        return ujson.dumps({"status": "success", "message": "Start command sent."})
    return ujson.dumps({"status": "error", "message": "Failed to send start command."})

def stop_operation():
    """ 
    4. สั่งหยุดการทำงาน 
    ตามเอกสารไม่มี 'Force stop' ที่ Address 3.
    [span_42]Address 3 คือ "Coins/money paid"[span_42](end_span)
    การหยุดการทำงานอาจเป็นส่วนหนึ่งของการรีเซ็ตข้อผิดพลาดหรือมี Address อื่นที่ไม่ได้ระบุไว้ในส่วนที่ให้มา.
    [span_43]หากต้องการหยุดการทำงานโดยใช้ข้อมูลที่ให้มา อาจต้องพิจารณา "Error reset/slience" ที่ Address 0[span_43](end_span)
    หรือหาก "Start run" ที่ Address 1 เป็นสถานะ toggle, การส่ง 0 อาจเป็นการหยุด.
    แต่จากข้อมูลที่ให้มา การหยุดโดยตรงที่ Address 3 ไม่ถูกต้องตามเอกสาร.
    ดังนั้น ฟังก์ชันนี้จะไม่ถูกนำไปใช้ในตัวอย่าง main() จนกว่าจะได้ข้อมูลที่ชัดเจน.
    """ 
    # [span_44]This function is commented out or needs clarification as Address 3 is for "Coins/money paid"[span_44](end_span)
    # if modbus_client.write_multiple_registers(3, [1]): # Address 3, Value 1
    #     return ujson.dumps({"status": "success", "message": "Stop command sent."})
    return ujson.dumps({"status": "error", "message": "Stop operation is not clearly defined in the provided document for Address 3."})

def add_coins(amount):
    """
    5. เพิ่มเหรียญ
    [span_45]เขียนค่าจำนวนเหรียญไปยัง Address 3 (Coins/money paid)[span_45](end_span)
    [span_46]Value range: 0-65535[span_46](end_span)
    """
    if not 0 <= amount <= 65535: # Value range: 0-65535[span_47](end_span)
        return ujson.dumps({"status": "error", "message": "Invalid coin amount. Must be between 0 and 65535."})

    if modbus_client.write_multiple_registers(3, [amount]): # Address 3, Value 'amount'[span_48](end_span)
        return ujson.dumps({"status": "success", "message": f"Added {amount} coins."})
    return ujson.dumps({"status": "error", "message": "Failed to add coins."})

def reset_error():
    """
    6. แก้ไขข้อผิดพลาด (Error reset/slience)
    [span_49]เขียนค่า 1 ไปยัง Address 0[span_49](end_span)
    """
    if modbus_client.write_multiple_registers(0, [1]): # Address 0, Value 1[span_50](end_span)
        return ujson.dumps({"status": "success", "message": "Error reset command sent."})
    return ujson.dumps({"status": "error", "message": "Failed to send error reset command."})
 
def send_command(address, value):
    """
    ฟังก์ชันเอนกประสงค์สำหรับส่งคำสั่งเขียนค่าเดี่ยวไปยัง Address ที่ระบุ
    ใช้สำหรับกรณีที่ต้องการเขียนเพียง 1 register เท่านั้น
    """
    if not isinstance(value, list) or len(value) != 1:
        return ujson.dumps({"status": "error", "message": "Value must be a list containing a single integer."})

    if modbus_client.write_multiple_registers(address, value):
        return ujson.dumps({"status": "success", "message": f"Command sent to address {address} with value {value[0]}."})
    return ujson.dumps({"status": "error", "message": f"Failed to send command to address {address}."})

def write_credentials(name,response):
        with open(str(name)+'.json', 'w') as file:
            file.write(response)

# --- ตัวอย่างการใช้งาน ---
def main():

    print("\n--- Selecting Program (e.g., Program 1) ---")
    # [span_51]เลือกโปรแกรม 1 (ค่า 0-19 ตามเอกสารสำหรับ 'frue: 0.19' ที่ Address 4)[span_51](end_span)
    select_program_json = select_program(1) 
    write_credentials('select_program',select_program_json)
    print(select_program_json) 
    time.sleep(2)

    print("\n--- Adding Coins (e.g., 5 coins) ---")
    # [span_52]เพิ่มเหรียญ 5 เหรียญ ไปยัง Address 3 (Coins/money paid)[span_52](end_span)
    add_coins_json = add_coins(5)
    write_credentials('add_coins',add_coins_json)
    print(add_coins_json)
    time.sleep(2) # ลดเวลา sleep เพื่อให้ตัวอย่างรันเร็วขึ้น

    print("\n--- Sending Start Command ---")
    # [span_53]ส่งคำสั่งเริ่มทำงาน ไปยัง Address 1 (Start run)[span_53](end_span)
    start_json = start_operation()
    write_credentials('start',start_json)
    print(start_json)
    time.sleep(2) # ลดเวลา sleep

    # ฟังก์ชัน stop_operation ถูกระงับชั่วคราวเนื่องจาก Address 3 ไม่ใช่ 'Force stop' ตามเอกสารที่ให้มา
    # print("\n--- Sending Stop Command ---")
    # stop_json = stop_operation()
    # write_credentials('stop',stop_json)
    # print(stop_json)
    # time.sleep(2)

    print("\n--- Resetting Error ---")
    # [span_54]ส่งคำสั่งรีเซ็ตข้อผิดพลาด ไปยัง Address 0 (Error reset/slience)[span_54](end_span)
    reset_error_json = reset_error()
    write_credentials('reset_error',reset_error_json)
    print(reset_error_json)
    time.sleep(2)

    print("\n--- Getting Machine Status Again ---")
    status_json_after_commands = get_machine_status()
    print(status_json_after_commands)

